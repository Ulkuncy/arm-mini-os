//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "embxx/util/assert/CxxTestAssert.h"
#include "embxx/comms/MsgAllocators.h"
#include "embxx/comms/protocol.h"
#include "cxxtest/TestSuite.h"
#include "CommsTestCommon.h"

class MsgIdLayerTestSuite : public CxxTest::TestSuite,
                            public embxx::util::EnableAssert<embxx::util::assert::CxxTestAssert>
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

private:

    struct Traits1 {
        typedef embxx::comms::traits::endian::Big Endianness;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
        static const std::size_t MsgIdLen = 1;
    };

    struct Traits2 {
        typedef embxx::comms::traits::endian::Big Endianness;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
        static const std::size_t MsgIdLen = 2;
    };

    struct Traits3 {
        typedef embxx::comms::traits::endian::Little Endianness;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
        static const std::size_t MsgIdLen = 3;
    };

    template <typename TTraits>
    struct ProtocolStack {
        typedef embxx::comms::protocol::MsgIdLayer<
                typename AllMessages<TTraits>::Type,
                embxx::comms::DynMemMsgAllocator,
                TTraits,
                embxx::comms::protocol::MsgDataLayer<
                    TestMessageBase<TTraits> >
                > Type;
    };

    template <typename TTraits>
    struct InPlaceProtocolStack {
        typedef embxx::comms::protocol::MsgIdLayer<
                typename AllMessages<TTraits>::Type,
                embxx::comms::InPlaceMsgAllocator<typename AllMessages<TTraits>::Type>,
                TTraits,
                embxx::comms::protocol::MsgDataLayer<
                    TestMessageBase<TTraits> >
                > Type;
    };
};

void MsgIdLayerTestSuite::test1()
{
    const char buf[] = {
        MessageType1, 0x01, 0x02
    };

    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);


    auto msg = successfulReadWriteMsgTest<Traits1, Message1, ProtocolStack>(buf, bufSize);
    TS_ASSERT_EQUALS(msg.getValue(), 0x0102);

    auto sameMsg = successfulReadWriteMsgTest<Traits1, Message1, InPlaceProtocolStack>(buf, bufSize);
    TS_ASSERT_EQUALS(sameMsg.getValue(), 0x0102);

    TS_ASSERT_EQUALS(msg, sameMsg);
}

void MsgIdLayerTestSuite::test2()
{
    typedef Message1<Traits2> Message;
    Message msg;
    msg.setValue(0x0203);

    const char expectedBuf[] = {
        0x0, MessageType1, 0x02, 0x03
    };

    char buf[4] = {0};
    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);

    writeReadMsgTest<Traits2, Message1, ProtocolStack>(msg, buf, bufSize, embxx::comms::ErrorStatus::Success, &expectedBuf[0]);

    writeReadMsgTest<Traits2, Message1, InPlaceProtocolStack>(msg, buf, bufSize, embxx::comms::ErrorStatus::Success, &expectedBuf[0]);
}

void MsgIdLayerTestSuite::test3()
{
    const char buf[] = {
        MessageType2, 0, 0
    };

    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);

    auto msg = successfulReadWriteMsgTest<Traits3, Message2, ProtocolStack>(buf, bufSize);
    auto sameMsg = successfulReadWriteMsgTest<Traits3, Message2, InPlaceProtocolStack>(buf, bufSize);
    TS_ASSERT_EQUALS(msg, sameMsg);
}


void MsgIdLayerTestSuite::test4()
{
    const char buf[] = {
        0x0, UnusedValue1, 0x00, 0x00
    };

    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);

    auto msg = readWriteMsgTest<Traits2, ProtocolStack>(buf, bufSize, embxx::comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!msg);

    auto inPlaceMsg = readWriteMsgTest<Traits2, InPlaceProtocolStack>(buf, bufSize, embxx::comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT(!inPlaceMsg);
}

void MsgIdLayerTestSuite::test5()
{
    typedef Message1<Traits3> Message;
    Message msg;
    msg.setValue(0x0203);

    char buf[2] = {0};
    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);

    writeReadMsgTest<Traits3, Message1, ProtocolStack>(msg, buf, bufSize, embxx::comms::ErrorStatus::BufferOverflow);
    writeReadMsgTest<Traits3, Message1, InPlaceProtocolStack>(msg, buf, bufSize, embxx::comms::ErrorStatus::BufferOverflow);
}

