//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <cstddef>
#include <iostream>
#include <algorithm>
#include <iterator>

#include "embxx/util/assert/CxxTestAssert.h"
#include "embxx/comms/protocol/MsgDataLayer.h"
#include "cxxtest/TestSuite.h"
#include "CommsTestCommon.h"

class MsgDataLayerTestSuite : public CxxTest::TestSuite,
                              public embxx::util::EnableAssert<embxx::util::assert::CxxTestAssert>
{
public:
    void test1();
    void test2();
    void test3();
    void test4();

private:

    template <template<class> class TMessage, typename TTraits>
    TMessage<TTraits> internalReadWriteTest(
        const char* const buf,
        std::size_t bufSize,
        embxx::comms::ErrorStatus expectedErrStatus = embxx::comms::ErrorStatus::Success);

    template <template<class> class TMessage, typename TTraits>
    TMessage<TTraits> internalReadWriteToVectorTest(
        const char* const buf,
        std::size_t bufSize,
        embxx::comms::ErrorStatus expectedErrStatus = embxx::comms::ErrorStatus::Success);

    template <template<class> class TMessage, typename TTraits>
    void internalWriteReadTest(
        const TMessage<TTraits>& msg,
        char* const buf,
        std::size_t bufSize,
        embxx::comms::ErrorStatus expectedErrStatus = embxx::comms::ErrorStatus::Success,
        const char* expectedBuf = 0);

    struct BigEndianTraits {
        typedef embxx::comms::traits::endian::Big Endianness;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
    };

    struct VectorBigEndianTraits {
        typedef embxx::comms::traits::endian::Big Endianness;
        typedef const char* ReadIterator;
        typedef std::back_insert_iterator<std::vector<char> > WriteIterator;
    };

    struct LittleEndianTraits {
        typedef embxx::comms::traits::endian::Little Endianness;
        typedef const char* ReadIterator;
        typedef char* WriteIterator;
    };

    template <typename TTraits>
    struct ProtocolStack {
        typedef embxx::comms::protocol::MsgDataLayer<
                TestMessageBase<TTraits> > Type;
    };
};

void MsgDataLayerTestSuite::test1()
{
    const char buf[] = {
        0x01, 0x02
    };

    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);


    auto msg = internalReadWriteTest<Message1, BigEndianTraits>(buf, bufSize);
    TS_ASSERT_EQUALS(msg.getValue(), 0x0102);
    auto msg2 = internalReadWriteToVectorTest<Message1, VectorBigEndianTraits>(buf, bufSize);
    TS_ASSERT_EQUALS(msg2.getValue(), 0x0102);
}

void MsgDataLayerTestSuite::test2()
{
    typedef Message1<BigEndianTraits> Message;
    Message msg;
    msg.setValue(0x0203);

    const char expectedBuf[] = {
        0x02, 0x03
    };

    const std::size_t bufSize = sizeof(expectedBuf)/sizeof(expectedBuf[0]);
    char buf[bufSize] = {0};

    internalWriteReadTest(msg, buf, bufSize, embxx::comms::ErrorStatus::Success, &expectedBuf[0]);
}

void MsgDataLayerTestSuite::test3()
{
    const char buf[] = {
        0
    };

    auto msg = internalReadWriteTest<Message2, BigEndianTraits>(buf, 0);
    static_cast<void>(msg);
}

void MsgDataLayerTestSuite::test4()
{
    typedef Message1<LittleEndianTraits> Message;
    Message msg;
    msg.setValue(0x0203);

    char buf[1] = {0};
    const std::size_t bufSize = sizeof(buf)/sizeof(buf[0]);

    internalWriteReadTest(msg, buf, bufSize, embxx::comms::ErrorStatus::BufferOverflow);
}

template <template<class> class TMessage, typename TTraits>
TMessage<TTraits> MsgDataLayerTestSuite::internalReadWriteTest(
    const char* const buf,
    std::size_t bufSize,
    embxx::comms::ErrorStatus expectedErrStatus)
{
    typedef TMessage<TTraits> Message;
    typedef TTraits Traits;
    typedef typename ProtocolStack<Traits>::Type ProtStack;

    ProtStack stack;
    auto readIter = buf;
    std::unique_ptr<Message> msg(new Message);
    auto es = stack.read(msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == embxx::comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        std::unique_ptr<char[]> outDataBuf(new char[diff]);
        auto writeIter = &outDataBuf[0];
        auto writeES = stack.write(*msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, embxx::comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }

    return *msg;
}

template <template<class> class TMessage, typename TTraits>
TMessage<TTraits> MsgDataLayerTestSuite::internalReadWriteToVectorTest(
    const char* const buf,
    std::size_t bufSize,
    embxx::comms::ErrorStatus expectedErrStatus)
{
    typedef TMessage<TTraits> Message;
    typedef TTraits Traits;
    typedef typename ProtocolStack<Traits>::Type ProtStack;

    ProtStack stack;
    auto readIter = buf;
    std::unique_ptr<Message> msg(new Message);
    auto es = stack.read(msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == embxx::comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        std::vector<char> outDataBuf;
        auto writeIter = std::back_inserter(outDataBuf);
        auto writeES = stack.write(*msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, embxx::comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(diff, outDataBuf.size());
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }

    return *msg;
}


template <template<class> class TMessage, typename TTraits>
void MsgDataLayerTestSuite::internalWriteReadTest(
    const TMessage<TTraits>& msg,
    char* const buf,
    std::size_t bufSize,
    embxx::comms::ErrorStatus expectedErrStatus,
    const char* expectedBuf)
{
    typedef TMessage<TTraits> Message;
    typedef TTraits Traits;
    typedef typename ProtocolStack<Traits>::Type ProtStack;

    ProtStack stack;
    auto writeIter = buf;
    embxx::comms::ErrorStatus es = stack.write(msg, writeIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == embxx::comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, writeIter));
        TS_ASSERT(expectedBuf != 0);
        TS_ASSERT(std::equal(expectedBuf, expectedBuf + diff, buf));

        std::unique_ptr<Message> readMsgPtr(new Message);
        auto readIter = static_cast<const char*>(buf);
        auto readES = stack.read(readMsgPtr, readIter, diff);
        TS_ASSERT_EQUALS(readES, embxx::comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(msg, *readMsgPtr);
    }
}
