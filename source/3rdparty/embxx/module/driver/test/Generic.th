//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "embxx/util/EventLoop.h"
#include "embxx/util/StaticFunction.h"
#include "embxx/driver/Generic.h"
#include "cxxtest/TestSuite.h"
#include "module/device/test/EventLoopLock.h"
#include "module/device/test/EventLoopCond.h"

class GenericDriverTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

private:

    typedef embxx::util::EventLoop<
        132,
        embxx::device::test::EventLoopLock,
        embxx::device::test::EventLoopCond> EventLoop;

    template <typename THandler>
    class Device
    {
    public:
        template <typename TFunc>
        void setHandler(TFunc&& func)
        {
            handler_ = std::forward<TFunc>(func);
        }

        template <typename... TArgs>
        void invoke(TArgs&&... args)
        {
            if (handler_) {
                handler_(std::forward<TArgs>(args)...);
            }
        }

    private:
        THandler handler_;
    };

};

void GenericDriverTestSuite::test1()
{
    typedef Device<embxx::util::StaticFunction<void ()> > DummyDevice;

    typedef embxx::driver::Generic<
        DummyDevice,
        EventLoop,
        void ()> Driver;

    EventLoop el;
    DummyDevice device;
    Driver driver(device, el);

    bool invoked = false;
    driver.setHandler(
        [&invoked, &el]()
        {
            invoked = true;
            el.stop();
        });

    device.invoke();
    TS_ASSERT(!invoked);
    el.run();
    TS_ASSERT(invoked);
}

void GenericDriverTestSuite::test2()
{
    typedef Device<embxx::util::StaticFunction<void (char)> > DummyDevice;

    typedef embxx::driver::Generic<
        DummyDevice,
        EventLoop,
        void (char)> Driver;

    EventLoop el;
    DummyDevice device;
    Driver driver(device, el);

    bool invoked = false;
    const char expectedChar = 'a';
    driver.setHandler(
        [&invoked, expectedChar, &el](char ch)
        {
            invoked = true;
            TS_ASSERT_EQUALS(ch, expectedChar);
            el.stop();
        });

    device.invoke(expectedChar);
    TS_ASSERT(!invoked);
    el.run();
    TS_ASSERT(invoked);
}




