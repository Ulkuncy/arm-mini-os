//
// Copyright 2012 - 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <cstdint>
#include <algorithm>
#include <numeric>
#include <array>
#include <vector>
#include <iterator>

#include "embxx/io/access.h"

#include "cxxtest/TestSuite.h"

class AccessTestSuite : public CxxTest::TestSuite
{
public:
    void testBigUint8();
    void testBigInt8();
    void testLittleUint8();
    void testLittleInt8();
    void testBigUint16();
    void testBigInt16();
    void testLittleUint16();
    void testLittleInt16();
    void testBigUint32();
    void testBigInt32();
    void testLittleUint32();
    void testLittleInt32();
    void testBigUint64();
    void testBigInt64();
    void testLittleUint64();
    void testLittleInt64();
    void testPutGetData();
    void testBackInserter();

private:
    template <typename T>
    void checkSinglePutGetBig(
        T outValue,
        std::uint8_t* const arr);

    template <typename T, std::size_t TSize>
    void checkSinglePutGetBigPartial(
        T outValue,
        std::uint8_t* const arr);

    template <typename T>
    void internalTestPutGetBig(
        typename std::make_unsigned<T>::type increment = 1);

    template <typename T, std::size_t TSize>
    void internalTestPutGetBig(
        typename std::make_unsigned<T>::type increment = 1);

    template <typename T>
    void checkSinglePutGetLittle(
        T outValue,
        std::uint8_t* const arr);

    template <typename T, std::size_t TSize>
    void checkSinglePutGetLittlePartial(
        T outValue,
        std::uint8_t* const arr);

    template <typename T>
    void internalTestPutGetLittle(
        typename std::make_unsigned<T>::type increment = 1);

    template <typename T, std::size_t TSize>
    void internalTestPutGetLittle(
        typename std::make_unsigned<T>::type increment = 1);

    template <typename TEndian, typename T>
    void internalPutGetData(T value);

    template <typename TEndian, typename T>
    void internalBackInserterTest(T value);
};

void AccessTestSuite::testBigUint8()
{
    internalTestPutGetBig<std::uint8_t>();
}

void AccessTestSuite::testBigInt8()
{
    internalTestPutGetBig<std::int8_t>();
}

void AccessTestSuite::testLittleUint8()
{
    internalTestPutGetLittle<std::uint8_t>();
}

void AccessTestSuite::testLittleInt8()
{
    internalTestPutGetLittle<std::int8_t>();
}

void AccessTestSuite::testBigUint16()
{
    internalTestPutGetBig<std::uint16_t>();
    internalTestPutGetBig<std::uint16_t, 1>();
}

void AccessTestSuite::testBigInt16()
{
    internalTestPutGetBig<std::int16_t>();
    internalTestPutGetBig<std::int16_t, 1>();
}

void AccessTestSuite::testLittleUint16()
{
    internalTestPutGetLittle<std::uint16_t>();
    internalTestPutGetLittle<std::uint16_t, 1>();
}

void AccessTestSuite::testLittleInt16()
{
    internalTestPutGetLittle<std::int16_t>();
    internalTestPutGetLittle<std::int16_t, 1>();
}

void AccessTestSuite::testBigUint32()
{
    internalTestPutGetBig<std::uint32_t>(0xffff);
    internalTestPutGetBig<std::uint32_t, 1>(0xffff);
    internalTestPutGetBig<std::uint32_t, 2>(0xffff);
    internalTestPutGetBig<std::uint32_t, 3>(0xffff);
}

void AccessTestSuite::testBigInt32()
{
    internalTestPutGetBig<std::int32_t>(0xffff);
    internalTestPutGetBig<std::int32_t, 1>();
    internalTestPutGetBig<std::int32_t, 2>(0xff);
    internalTestPutGetBig<std::int32_t, 3>(0xffff);
}

void AccessTestSuite::testLittleUint32()
{
    internalTestPutGetLittle<std::uint32_t>(0xffff);
    internalTestPutGetLittle<std::uint32_t, 1>(0xffff);
    internalTestPutGetLittle<std::uint32_t, 2>(0xffff);
    internalTestPutGetLittle<std::uint32_t, 3>(0xffff);
}

void AccessTestSuite::testLittleInt32()
{
    internalTestPutGetLittle<std::int32_t>(0xffff);
    internalTestPutGetLittle<std::int32_t, 1>();
    internalTestPutGetLittle<std::int32_t, 2>(0xff);
    internalTestPutGetLittle<std::int32_t, 3>(0xffff);
}

void AccessTestSuite::testBigUint64()
{
    internalTestPutGetBig<std::uint64_t>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 1>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 2>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 3>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 4>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 5>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 6>(0xffffffffffffL);
    internalTestPutGetBig<std::uint64_t, 7>(0xffffffffffffL);
}

void AccessTestSuite::testBigInt64()
{
    internalTestPutGetBig<std::int64_t>(0xffffffffffffL);
    internalTestPutGetBig<std::int64_t, 1>();
    internalTestPutGetBig<std::int64_t, 2>(0xff);
    internalTestPutGetBig<std::int64_t, 3>(0xffff);
    internalTestPutGetBig<std::int64_t, 4>(0xffffff);
    internalTestPutGetBig<std::int64_t, 5>(0xffffffffL);
    internalTestPutGetBig<std::int64_t, 6>(0xffffffffffL);
    internalTestPutGetBig<std::int64_t, 7>(0xffffffffffffL);

}

void AccessTestSuite::testLittleUint64()
{
    internalTestPutGetLittle<std::uint64_t>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 1>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 2>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 3>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 4>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 5>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 6>(0xffffffffffffL);
    internalTestPutGetLittle<std::uint64_t, 7>(0xffffffffffffL);
}

void AccessTestSuite::testLittleInt64()
{
    internalTestPutGetLittle<std::int64_t>(0xffffffffffffL);
    internalTestPutGetLittle<std::int64_t, 1>();
    internalTestPutGetLittle<std::int64_t, 2>(0xff);
    internalTestPutGetLittle<std::int64_t, 3>(0xffff);
    internalTestPutGetLittle<std::int64_t, 4>(0xffffff);
    internalTestPutGetLittle<std::int64_t, 5>(0xffffffffL);
    internalTestPutGetLittle<std::int64_t, 6>(0xffffffffffL);
    internalTestPutGetLittle<std::int64_t, 7>(0xffffffffffffL);
}

void AccessTestSuite::testPutGetData()
{
    internalPutGetData<embxx::io::traits::endian::Big>((std::uint8_t)0x3f);
    internalPutGetData<embxx::io::traits::endian::Little>((std::uint8_t)0x4a);
    internalPutGetData<embxx::io::traits::endian::Big>((std::uint16_t)0x1afc);
    internalPutGetData<embxx::io::traits::endian::Little>((std::uint16_t)0xdbea);
    internalPutGetData<embxx::io::traits::endian::Big>((std::uint32_t)0xdeadbeef);
    internalPutGetData<embxx::io::traits::endian::Little>((std::uint32_t)0xbeefdead);
    internalPutGetData<embxx::io::traits::endian::Big>((std::uint64_t)0xdeadbeefaaaabbbb);
    internalPutGetData<embxx::io::traits::endian::Little>((std::uint32_t)0xbeefdeadbbccbbcc);
}

void AccessTestSuite::testBackInserter()
{
    internalBackInserterTest<embxx::io::traits::endian::Big>((std::uint32_t)0xdeadbeef);
    internalBackInserterTest<embxx::io::traits::endian::Little>((std::uint32_t)0xbeefdeadbbccbbcc);
}

template <typename T>
void AccessTestSuite::checkSinglePutGetBig(
    T outValue,
    std::uint8_t* const arr)
{
    checkSinglePutGetBigPartial<T, sizeof(T)>(outValue, arr);
}

template <typename T, std::size_t TSize>
void AccessTestSuite::checkSinglePutGetBigPartial(
    T outValue,
    std::uint8_t* const arr)
{
    auto writeIter = arr;
    embxx::io::writeBig<TSize>(outValue, writeIter);
    auto diff = static_cast<unsigned>(std::distance(arr, writeIter));
    TS_ASSERT_EQUALS(diff, TSize);

    for (unsigned i = 0; i < TSize; ++i) {
        std::size_t valueShift = (TSize - (i + 1)) * 8;
        auto expectedByte = static_cast<std::uint8_t>(outValue >> valueShift);
        TS_ASSERT_EQUALS(arr[i], expectedByte);
    }

    auto readIter = arr;
    T inValue = embxx::io::readBig<T, TSize>(readIter);
    TS_ASSERT_EQUALS(outValue & inValue, inValue);
    TS_ASSERT_EQUALS((~outValue) & (~inValue), ~outValue);
    diff = static_cast<unsigned>(std::distance(arr, readIter));
    TS_ASSERT_EQUALS(diff, TSize);
}

template <typename T>
void AccessTestSuite::internalTestPutGetBig(
    typename std::make_unsigned<T>::type increment)
{
    internalTestPutGetBig<T, sizeof(T)>(increment);
}

template <typename T, std::size_t TSize>
void AccessTestSuite::internalTestPutGetBig(
    typename std::make_unsigned<T>::type increment)
{
    std::array<std::uint8_t, sizeof(T) + 1> arr;
    std::fill_n(&arr[0], arr.size(), 0U);

    T min = std::numeric_limits<T>::min();
    T max = std::numeric_limits<T>::max();
    if (std::is_signed<T>::value && (TSize < sizeof(T))) {
        typedef typename std::make_unsigned<T>::type UnsignedType;
        auto shift = (TSize * 8) - 1;
        auto mask = (static_cast<UnsignedType>(1) << shift) - 1;
        min = static_cast<T>(~mask);
        max = mask;
    }
    T limit = (max - increment);

    TS_ASSERT(increment > 0);
    typedef typename std::make_unsigned<T>::type UnsignedType;
    TS_ASSERT(increment < (static_cast<UnsignedType>(max) - min));

    for (T outValue = min; outValue <= limit; outValue += increment) {
        checkSinglePutGetBigPartial<T, TSize>(outValue, &arr[0]);
    }
    checkSinglePutGetBigPartial<T, TSize>(max, &arr[0]);
    TS_ASSERT_EQUALS(arr[sizeof(T)], 0);
}

template <typename T>
void AccessTestSuite::checkSinglePutGetLittle(
    T outValue,
    std::uint8_t* const arr)
{
    checkSinglePutGetLittlePartial<T, sizeof(T)>(outValue, arr);
}

template <typename T, std::size_t TSize>
void AccessTestSuite::checkSinglePutGetLittlePartial(
    T outValue,
    std::uint8_t* const arr)
{
    auto writeIter = arr;
    embxx::io::writeLittle<TSize>(outValue, writeIter);
    auto diff = static_cast<unsigned>(std::distance(arr, writeIter));
    TS_ASSERT_EQUALS(diff, TSize);

    for (unsigned i = 0; i < TSize; ++i) {
        std::size_t valueShift = i * 8;
        auto expectedByte = static_cast<std::uint8_t>(outValue >> valueShift);
        TS_ASSERT_EQUALS(arr[i], expectedByte);
    }

    auto readIter = arr;
    T inValue = embxx::io::readLittle<T, TSize>(readIter);
    TS_ASSERT_EQUALS(outValue & inValue, inValue);
    TS_ASSERT_EQUALS((~outValue) & (~inValue), ~outValue);
    diff = static_cast<unsigned>(std::distance(arr, readIter));
    TS_ASSERT_EQUALS(diff, TSize);
}

template <typename T>
void AccessTestSuite::internalTestPutGetLittle(
    typename std::make_unsigned<T>::type increment)
{
    internalTestPutGetLittle<T, sizeof(T)>(increment);
}

template <typename T, std::size_t TSize>
void AccessTestSuite::internalTestPutGetLittle(
    typename std::make_unsigned<T>::type increment)
{
    std::array<std::uint8_t, sizeof(T) + 1> arr;
    std::fill_n(&arr[0], arr.size(), 0U);

    T min = std::numeric_limits<T>::min();
    T max = std::numeric_limits<T>::max();
    if (std::is_signed<T>::value && (TSize < sizeof(T))) {
        typedef typename std::make_unsigned<T>::type UnsignedType;
        auto shift = (TSize * 8) - 1;
        auto mask = (static_cast<UnsignedType>(1) << shift) - 1;
        min = static_cast<T>(~mask);
        max = mask;
    }
    T limit = (max - increment);

    TS_ASSERT(increment > 0);
    typedef typename std::make_unsigned<T>::type UnsignedType;
    TS_ASSERT(increment < (static_cast<UnsignedType>(max) - min));

    for (T outValue = min; outValue <= limit; outValue += increment) {
        checkSinglePutGetLittlePartial<T, TSize>(outValue, &arr[0]);
    }
    checkSinglePutGetLittlePartial<T, TSize>(max, &arr[0]);
    TS_ASSERT_EQUALS(arr[sizeof(T)], 0);
}

template <typename TEndian, typename T>
void AccessTestSuite::internalPutGetData(T value)
{
    std::uint8_t arr[sizeof(T)] = {0};
    auto writeIter = &arr[0];
    embxx::io::writeData(value, writeIter, TEndian());

    auto readIter = &arr[0];
    T readValue = embxx::io::readData<T>(readIter, TEndian());
    TS_ASSERT_EQUALS(value, readValue);
}

template <typename TEndian, typename T>
void AccessTestSuite::internalBackInserterTest(T value)
{
    std::vector<std::uint8_t> vec;
    auto writeIter = std::back_inserter(vec);
    embxx::io::writeData(value, writeIter, TEndian());
    TS_ASSERT_EQUALS(vec.size(), sizeof(value));

    auto readIter = &vec[0];
    T readValue = embxx::io::readData<T>(readIter, TEndian());
    TS_ASSERT_EQUALS(value, readValue);
}
