/// @page util_event_loop_page Event Loop
/// @section util_event_loop_overview Overview
/// Bare metal platforms usually have two threads (modes) of execution:
/// @li Regular (non-interrupt) thread
/// @li Interrupt thread
///
/// The "interrupt" thread always takes priority and may interrupt the 
/// "regular" one in any moment. The former must perform its required 
/// functionality as quickly as possible and relinquish the CPU, so the 
/// "regular" thread may continue its execution. There is often a need to be 
/// able to schedule the execution of some functionality (sometimes referred as
/// "bottom halves") in the "regular" thread from the "interrupt" one. The
/// embxx::util::EventLoop class comes to provide all the required functionality
/// for this purpose.
///
/// @section util_event_loop_tutorial How to use
/// The embxx::util::EventLoop class has 3 template parameters. 
/// @li First one is the maximal size in bytes of internal queue of the event 
///     handlers. The queue is defined as internal data member of type 
///     embxx::container::BasicStaticQueue, i.e. it doesn't use dynamic memory
///     allocation and cannot be extended in the run time.
/// @li Second parameter is a "lockable" class that must provide interface 
///     similar to one of std::mutex, but with two additional functions:
///     lockInterruptCtx() and unlockInterruptCtx(). The lock object is used to  
///     protect the updates to the event queue from the possible race conditions 
///     when two of the execution threads try to update it at the same time.  
///     In other words its lock() member function must disable all the 
///     interrupts while unlock() restores original interrupt state prior to 
///     the call to the lock(). On generic bare metal platforms its 
///     lockInterruptCtx() and unlockInterruptCtx() member functions should
///     be empty because "regular" thread cannot interfere and other interrupts
///     are also disabled while the CPU is executing current interrupt handler.
///     If this is not the case than lockInterruptCtx() must disable other
///     interrupts with higher priority and unlockInterruptCtx() must restore
///     the state that was prior to lockInterruptCtx() call.
/// @li Third parameter is a "condition variable" class that must provide
///     the following interface:
///     @code
///     template <typename TLock>
///     void wait(TLock& lock);
///
///     void notify();
///     @endcode
///     It is used to wait for new handlers to execute when the queue gets 
///     emtpy and to notify that that current wait needs to be terminated when 
///     new handler has been added to the queue.
/// 
/// For example:
/// @code
/// struct InterruptDisabler
/// {
///     void lock() 
///     {
///         disableInterrupts()
///     }
///
///     void unlock()
///     {
///         enableInterrupts();
///     }
///
///     void lockInterruptCtx() 
///     {
///         // All interrupts are already disabled, no need to do anything
///     }
///
///     void unlockInterruptCtx()
///     {
///     }
/// };
///
/// class InterruptCondition
/// {
/// public:
///
///     template <typename TLock>
///     void wait(TLock& lock)
///     {
///        // Wait for interrupt instruction, no need to unlock (enable interrupts).
///        // The WFI instruction will exit when there is a pending interrupt
///        // even if all the interrupts are masked 
///        __WFI(); 
///     }    
///
///     void notify()
///     {
///         // No need to do anything
///     } 
/// };
///
/// int main()
/// {
///     ... // some initialisation code
///     embxx::util::EventLoop<1024, InterruptDisabler, InterruptCondition> el;
///     ... // Pass reference/pointer to device drivers
///     el.run(); // Run the event loop forever
///     GASSERT(!"Mustn't get here");
///     return 0;
/// }
/// @endcode
///
/// In order to schedule some function for later execution in the "regular" 
/// thread use use embxx::util::EventLoop::post() member function in conjunction
/// with std::bind():
/// @code
/// bool result = el.post(std::bind(&someMemFunc, someObj, someValue));
/// if (!result) {
///     GASSERT(!"EventLoop queue is too small");
/// }
/// @endcode
/// Please note that embxx::util::EventLoop::post() calls lock() of internal
/// locker object (disables interrupts in the example above). However when
/// trying to schedule new handler from the "interrupt" thread, use 
/// embxx::util::EventLoop::postInterruptCtx() member function:
/// @code
/// void someInterruptHandler()
/// {
///     bool result = el.postInterruptCtx(std::bind(&someMemFunc, someObj, someValue));
///     if (!result) {
///         GASSERT(!"EventLoop queue is too small");
///     }
/// }
/// @endcode
///
/// @section util_event_loop_busy_wait Executing busy wait
/// Sometimes processing of some event may require execution of busy wait on
/// some other condition such as change of value of some register. If the wait
/// is executed in simple while loop, it may delay processing of other events 
/// posted from their interrupt handlers. The embxx::util::EventLoop class 
/// provides busyWait() member function to manage busy wait while still allowing 
/// other handlers being called while the condition of busy wait evaluates to 
/// false.
///
/// The busyWait() member function receives two parameters. The first one is
/// a predicate functor that evaluates the condition and returns true when
/// busy wait needs to be terminated and completion function must be invoked.
/// The second parameter is also a functor which will be invoked when busy
/// wait is complete.
/// @code
/// ...
/// typedef embxx::util::EventLoop<...> EventLoop;
///
/// void regUpdated(EventLoop& el)
/// {
///     ... // Register is updated, keep processing.
///     el.busyWait(...); // some othe busy wait.
///     ...
/// }
///
/// int main()
/// {
///     ... // some initialisation code
///     EventLoop el;
///     ...
///     auto pReg = reinterpret_cast<volatile std::uint32_t*>(/* some address */);
///     el.busyWait(
///         [pReg]()->bool { return (pReg & 0x1) != 0},
///         [&el]{}{ regUpdated(el); });
///     el.run(); // Run the event loop forever
///     GASSERT(!"Mustn't get here");
///     return 0;
/// }
/// @endcode
///