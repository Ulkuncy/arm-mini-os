//
// Copyright 2013 (C). Alex Robenko. All rights reserved.
//

// This file is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <boost/asio.hpp>
#include <boost/date_time.hpp>

#include "cxxtest/TestSuite.h"

#include "embxx/util/EventLoop.h"
#include "embxx/driver/Character.h"

#include "embxx/device/DeviceOpQueue.h"
#include "embxx/device/IdDeviceCharAdapter.h"
#include "module/device/test/EventLoopLock.h"
#include "module/device/test/EventLoopCond.h"
#include "module/device/test/UartDevice.h"
#include "module/device/test/I2cDevice.h"
#include "module/device/test/SpiDevice.h"

class CharacterDriverTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();
    void test9();
    void test10();
    void test11();
    void test12();
    void test13();
    void test14();
    void test15();
    void test16();

private:
    typedef embxx::util::EventLoop<
        512,
        embxx::device::test::EventLoopLock,
        embxx::device::test::EventLoopCond> EventLoop;

    typedef embxx::device::test::UartDevice<EventLoop::LockType, char> CharDevice;
    typedef embxx::device::test::I2cDevice<EventLoop::LockType, char> I2cDevice;
    typedef embxx::device::test::SpiDevice<EventLoop::LockType, char> SpiDevice;

    struct DefaultReadUntilTraits
    {
        typedef embxx::util::StaticFunction<void(const embxx::error::ErrorStatus&, std::size_t)> ReadHandler;
        typedef embxx::util::StaticFunction<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
        typedef embxx::util::StaticFunction<bool(CharDevice::CharType)> ReadUntilPred;
        static const std::size_t ReadQueueSize = 1;
        static const std::size_t WriteQueueSize = 1;
    };

    struct DefaultStdFunctionTraits
    {
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> ReadHandler;
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
        typedef std::nullptr_t ReadUntilPred;
        static const std::size_t ReadQueueSize = 1;
        static const std::size_t WriteQueueSize = 1;
    };

    template <std::size_t TQueueSize>
    struct QueuedReadTraits
    {
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> ReadHandler;
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
        typedef std::function<bool (CharDevice::CharType)> ReadUntilPred;
        static const std::size_t ReadQueueSize = TQueueSize;
        static const std::size_t WriteQueueSize = 0;
    };

    template <std::size_t TQueueSize>
    struct QueuedWriteTraits
    {
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> ReadHandler;
        typedef std::function<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
        typedef std::nullptr_t ReadUntilPred;
        static const std::size_t ReadQueueSize = 0;
        static const std::size_t WriteQueueSize = TQueueSize;
    };
};

void CharacterDriverTestSuite::test1()
{
    typedef embxx::driver::Character<CharDevice, EventLoop> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(&ReadString[0], ReadString.size());

    bool asyncReadHandlerCalled = false;
    socket.asyncRead(outArray, ReadString.size(),
        [&el, &outArray, &asyncReadHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
}

void CharacterDriverTestSuite::test2()
{
    typedef embxx::driver::Character<CharDevice, EventLoop> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string WriteString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    bool asyncWriteHandlerCalled = false;
    socket.asyncWrite(&WriteString[0], WriteString.size(),
        [&el, &device, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(size, WriteString.size());
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    TS_ASSERT(std::equal(WriteString.begin(), WriteString.end(), device.getWrittenData().begin()));
}

void CharacterDriverTestSuite::test3()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, DefaultReadUntilTraits> Socket;

    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDE\nFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(&ReadString[0], ReadString.size());

    bool asyncReadHandlerCalled = false;
    socket.asyncReadUntil(outArray, ReadString.size(), '\n',
        [&el, &outArray, &asyncReadHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, 6U);
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.begin() + 6U, &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
}

void CharacterDriverTestSuite::test4()
{
    typedef embxx::driver::Character<
        CharDevice,
        EventLoop,
        DefaultStdFunctionTraits> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(&CommonString[0], CommonString.size());

    bool asyncReadHandlerCalled = false;
    bool asyncWriteHandlerCalled = false;
    socket.asyncRead(outArray, CommonString.size(),
        [&el, &outArray, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray[0]));
            if (asyncWriteHandlerCalled) {
                el.stop();
            }
        });

    socket.asyncWrite(&CommonString[0], CommonString.size(),
        [&el, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t writtenSize)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            if (asyncReadHandlerCalled) {
                el.stop();
            }
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData().begin()));
}

void CharacterDriverTestSuite::test5()
{
    typedef embxx::device::DeviceOpQueue<I2cDevice, 1> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<DevCharAdapter, EventLoop> Socket;
    EventLoop el;
    I2cDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id = 0x55;
    DevCharAdapter devAdapter(devOpQueue, Id);
    Socket socket(devAdapter, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(Id, &ReadString[0], ReadString.size());

    bool asyncReadHandlerCalled = false;
    socket.asyncRead(outArray, ReadString.size(),
        [&el, &outArray, &asyncReadHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
}

void CharacterDriverTestSuite::test6()
{
    typedef embxx::device::DeviceOpQueue<I2cDevice, 1> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<
        DevCharAdapter,
        EventLoop,
        DefaultStdFunctionTraits> Socket;

    EventLoop el;
    I2cDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id = 0x55;
    DevCharAdapter devAdapter(devOpQueue, Id);
    Socket socket(devAdapter, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(Id, &CommonString[0], CommonString.size());

    bool asyncReadHandlerCalled = false;
    bool asyncWriteHandlerCalled = false;
    socket.asyncRead(outArray, CommonString.size(),
        [&el, &socket, &outArray, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray[0]));

            socket.asyncWrite(&CommonString[0], CommonString.size(),
                [&el, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es2, std::size_t writtenSize)
                {
                    TS_ASSERT(!es2);
                    asyncWriteHandlerCalled = true;
                    TS_ASSERT_EQUALS(writtenSize, CommonString.size());
                    el.stop();
                });

        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData(Id).begin()));
}

void CharacterDriverTestSuite::test7()
{
    typedef embxx::device::DeviceOpQueue<I2cDevice, 2> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<
        DevCharAdapter,
        EventLoop,
        DefaultStdFunctionTraits> Socket;

    EventLoop el;
    I2cDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id1 = 0x55;
    static const DevCharAdapter::DeviceIdType Id2 = 0x50;
    DevCharAdapter devAdapter1(devOpQueue, Id1);
    DevCharAdapter devAdapter2(devOpQueue, Id2);
    Socket socket1(devAdapter1, el);
    Socket socket2(devAdapter2, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(Id1, &CommonString[0], CommonString.size());

    bool asyncReadHandlerCalled = false;
    bool asyncWriteHandlerCalled = false;
    socket1.asyncRead(outArray, CommonString.size(),
        [&el, &outArray, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray[0]));
            if (asyncWriteHandlerCalled) {
                el.stop();
            }
        });

    socket2.asyncWrite(&CommonString[0], CommonString.size(),
        [&el, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t writtenSize)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            if (asyncReadHandlerCalled) {
                el.stop();
            }
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData(Id2).begin()));
}

void CharacterDriverTestSuite::test8()
{
    typedef embxx::driver::Character<
        CharDevice,
        EventLoop,
        DefaultReadUntilTraits> Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaz");

    char outArray[256] = {};
    device.setDataToRead(&ReadString[0], ReadString.size());

    bool asyncReadHandlerCalled = false;
    socket.asyncReadUntil(
        outArray,
        ReadString.size(),
        [](CharDevice::CharType ch) -> bool
        {
            return ch != 'a';
        },
        [&el, &outArray, &asyncReadHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
}

void CharacterDriverTestSuite::test9()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, QueuedReadTraits<3> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    static const std::string AllData = ReadString + ReadString + ReadString;

    static const std::size_t BufSize = 256;
    char outArray1[BufSize] = {};
    char outArray2[BufSize] = {};
    char outArray3[BufSize] = {};
    device.setDataToRead(&AllData[0], AllData.size());

    bool asyncReadHandlerCalled1 = false;
    socket.asyncRead(outArray1, ReadString.size(),
        [&outArray1, &asyncReadHandlerCalled1](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray1[0]));
        });

    bool asyncReadHandlerCalled2 = false;
    socket.asyncRead(outArray2, ReadString.size(),
        [&outArray2, &asyncReadHandlerCalled2](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray2[0]));
        });

    bool asyncReadHandlerCalled3 = false;
    socket.asyncRead(outArray3, ReadString.size(),
        [&el, &outArray3, &asyncReadHandlerCalled3](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled3 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray3[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled3, true);
}

void CharacterDriverTestSuite::test10()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, QueuedReadTraits<3> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString1(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    static const std::string ReadString2(
        "ABCDEFG\n");
    static const std::string ReadString3(
        "abcdefghijklmnopqrstuvwxyz");

    static const std::string AllData = ReadString1 + ReadString2 + ReadString3;

    static const std::size_t BufSize = 256;
    char outArray1[BufSize] = {};
    char outArray2[BufSize] = {};
    char outArray3[BufSize] = {};
    device.setDataToRead(&AllData[0], AllData.size());

    bool asyncReadHandlerCalled1 = false;
    socket.asyncRead(outArray1, ReadString1.size(),
        [&outArray1, &asyncReadHandlerCalled1](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, ReadString1.size());
            TS_ASSERT(std::equal(ReadString1.begin(), ReadString1.end(), &outArray1[0]));
        });

    bool asyncReadHandlerCalled2 = false;
    socket.asyncReadUntil(outArray2, std::extent<decltype(outArray2)>::value, '\n',
        [&outArray2, &asyncReadHandlerCalled2](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, ReadString2.size());
            TS_ASSERT(std::equal(ReadString2.begin(), ReadString2.end(), &outArray2[0]));
        });

    bool asyncReadHandlerCalled3 = false;
    socket.asyncRead(outArray3, ReadString3.size(),
        [&el, &outArray3, &asyncReadHandlerCalled3](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled3 = true;
            TS_ASSERT_EQUALS(size, ReadString3.size());
            TS_ASSERT(std::equal(ReadString3.begin(), ReadString3.end(), &outArray3[0]));
            el.stop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled3, true);
}

void CharacterDriverTestSuite::test11()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, QueuedReadTraits<2> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    static const std::string AllData = ReadString + ReadString + ReadString;

    static const std::size_t BufSize = 256;
    char outArray1[BufSize] = {};
    char outArray2[BufSize] = {};
    char outArray3[BufSize] = {};
    device.setDataToRead(&AllData[0], AllData.size());

    bool asyncReadHandlerCalled1 = false;
    bool asyncReadHandlerCalled3 = false;
    socket.asyncRead(outArray1, ReadString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray1[0]));

            socket.asyncRead(outArray3, ReadString.size(),
                [&el, &outArray3, &asyncReadHandlerCalled3](const embxx::error::ErrorStatus& es2, std::size_t size2)
                {
                    TS_ASSERT(!es2);
                    asyncReadHandlerCalled3 = true;
                    TS_ASSERT_EQUALS(size2, ReadString.size());
                    TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray3[0]));
                    el.stop();
                });
        });

    bool asyncReadHandlerCalled2 = false;
    socket.asyncRead(outArray2, ReadString.size(),
        [&outArray2, &asyncReadHandlerCalled2](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray2[0]));
        });


    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled3, true);
}

void CharacterDriverTestSuite::test12()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, QueuedWriteTraits<3> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string WriteString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    static const std::string AllData = WriteString + WriteString + WriteString + WriteString;

    bool asyncWriteHandlerCalled1 = false;
    bool asyncWriteHandlerCalled4 = false;
    socket.asyncWrite(&WriteString[0], WriteString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, WriteString.size());

            socket.asyncWrite(&WriteString[0], WriteString.size(),
                [&](const embxx::error::ErrorStatus& es2, std::size_t size2)
                {
                    TS_ASSERT(!es2);
                    asyncWriteHandlerCalled4 = true;
                    TS_ASSERT_EQUALS(size2, WriteString.size());
                    el.stop();
                });
        });

    bool asyncWriteHandlerCalled2 = false;
    socket.asyncWrite(&WriteString[0], WriteString.size(),
        [&asyncWriteHandlerCalled2](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, WriteString.size());
        });

    bool asyncWriteHandlerCalled3 = false;
    socket.asyncWrite(&WriteString[0], WriteString.size(),
        [&asyncWriteHandlerCalled3](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled3 = true;
            TS_ASSERT_EQUALS(size, WriteString.size());
        });


    el.run();
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled3, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled4, true);
    TS_ASSERT_EQUALS(AllData.size(), device.getWrittenData().size());
    TS_ASSERT(std::equal(AllData.begin(), AllData.end(), device.getWrittenData().begin()));
}

void CharacterDriverTestSuite::test13()
{
    typedef embxx::device::DeviceOpQueue<I2cDevice, 1> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<
        DevCharAdapter,
        EventLoop,
        QueuedReadTraits<2> > Socket;

    EventLoop el;
    I2cDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id = 0x55;

    DevCharAdapter devAdapter(devOpQueue, Id);
    Socket socket(devAdapter, el);

    static const std::string ReadString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    static const std::string AllData = ReadString + ReadString + ReadString;

    static const std::size_t BufSize = 256;
    char outArray1[BufSize] = {};
    char outArray2[BufSize] = {};
    char outArray3[BufSize] = {};
    device.setDataToRead(Id, &AllData[0], AllData.size());

    bool asyncReadHandlerCalled1 = false;
    bool asyncReadHandlerCalled3 = false;
    socket.asyncRead(outArray1, ReadString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray1[0]));

            socket.asyncRead(outArray3, ReadString.size(),
                [&el, &outArray3, &asyncReadHandlerCalled3](const embxx::error::ErrorStatus& es2, std::size_t size2)
                {
                    TS_ASSERT(!es2);
                    asyncReadHandlerCalled3 = true;
                    TS_ASSERT_EQUALS(size2, ReadString.size());
                    TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray3[0]));
                    el.stop();
                });
        });

    bool asyncReadHandlerCalled2 = false;
    socket.asyncRead(outArray2, ReadString.size(),
        [&outArray2, &asyncReadHandlerCalled2](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, ReadString.size());
            TS_ASSERT(std::equal(ReadString.begin(), ReadString.end(), &outArray2[0]));
        });


    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled3, true);
}


void CharacterDriverTestSuite::test14()
{
    typedef embxx::driver::Character<CharDevice, EventLoop, QueuedReadTraits<3> > Socket;
    EventLoop el;
    CharDevice device(el.getLock());
    Socket socket(device, el);

    static const std::string ReadString(
        "AAAAAAAAAAAABCCCCC");

    static const std::size_t BufSize = 8;
    char outArray[BufSize] = {};
    device.setDataToRead(&ReadString[0], ReadString.size());

    auto pred =
        [](CharDevice::CharType ch) -> bool
        {
            return ch != 'A';
        };

    bool asyncReadHandlerCalled1 = false;
    bool asyncReadHandlerCalled2 = false;
    socket.asyncReadUntil(
        outArray,
        BufSize,
        pred,
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(es);
            TS_ASSERT_EQUALS(es.code(), embxx::error::ErrorCode::BufferOverflow);
            TS_ASSERT_EQUALS(size, BufSize);
            asyncReadHandlerCalled1 = true;

            socket.asyncReadUntil(
                outArray,
                BufSize,
                pred,
                [&](const embxx::error::ErrorStatus& es2, std::size_t size2)
                {
                    TS_ASSERT(!es2);
                    TS_ASSERT_EQUALS(size2, 5U);
                    asyncReadHandlerCalled2 = true;
                    el.stop();
                });
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
}

void CharacterDriverTestSuite::test15()
{
    typedef embxx::device::DeviceOpQueue<SpiDevice, 2> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<
        DevCharAdapter,
        EventLoop,
        DefaultStdFunctionTraits> Socket;

    EventLoop el;
    SpiDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id = 1;
    DevCharAdapter devAdapter(devOpQueue, Id);
    Socket socket(devAdapter, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray[256] = {};
    device.setDataToRead(Id, &CommonString[0], CommonString.size());

    bool asyncReadHandlerCalled = false;
    bool asyncWriteHandlerCalled = false;
    socket.asyncRead(outArray, CommonString.size(),
        [&el, &outArray, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray[0]));
            if (asyncWriteHandlerCalled) {
                el.stop();
            }
        });

    socket.asyncWrite(&CommonString[0], CommonString.size(),
        [&el, &asyncReadHandlerCalled, &asyncWriteHandlerCalled](const embxx::error::ErrorStatus& es, std::size_t writtenSize)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled = true;
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            if (asyncReadHandlerCalled) {
                el.stop();
            }
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled, true);
    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData(Id).begin()));
}

void CharacterDriverTestSuite::test16()
{
    typedef embxx::device::DeviceOpQueue<SpiDevice, 2> DevOpQueue;
    typedef embxx::device::IdDeviceCharAdapter<DevOpQueue> DevCharAdapter;
    typedef embxx::driver::Character<
        DevCharAdapter,
        EventLoop,
        DefaultStdFunctionTraits> Socket;

    EventLoop el;
    SpiDevice device(el.getLock());
    DevOpQueue devOpQueue(device);
    static const DevCharAdapter::DeviceIdType Id1 = 1;
    static const DevCharAdapter::DeviceIdType Id2 = 2;
    DevCharAdapter devAdapter1(devOpQueue, Id1);
    DevCharAdapter devAdapter2(devOpQueue, Id2);
    Socket socket1(devAdapter1, el);
    Socket socket2(devAdapter2, el);

    static const std::string CommonString(
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "abcdefghijklmnopqrstuvwxyz");

    char outArray1[256] = {};
    char outArray2[256] = {};

    device.setDataToRead(Id1, &CommonString[0], CommonString.size());
    device.setDataToRead(Id2, &CommonString[0], CommonString.size());

    bool asyncReadHandlerCalled1 = false;
    bool asyncWriteHandlerCalled1 = false;
    bool asyncReadHandlerCalled2 = false;
    bool asyncWriteHandlerCalled2 = false;

    auto checkStop =
        [&]()
        {
            if (asyncReadHandlerCalled1 &&
                asyncWriteHandlerCalled1 &&
                asyncReadHandlerCalled2 &&
                asyncWriteHandlerCalled2) {
                el.stop();
            }
        };

    socket1.asyncRead(outArray1, CommonString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled1 = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray1[0]));
            checkStop();
        });

    socket2.asyncWrite(&CommonString[0], CommonString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t writtenSize)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled2 = true;
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            checkStop();
        });

    socket2.asyncRead(outArray2, CommonString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t size)
        {
            TS_ASSERT(!es);
            asyncReadHandlerCalled2 = true;
            TS_ASSERT_EQUALS(size, CommonString.size());
            TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), &outArray2[0]));
            checkStop();
        });

    socket1.asyncWrite(&CommonString[0], CommonString.size(),
        [&](const embxx::error::ErrorStatus& es, std::size_t writtenSize)
        {
            TS_ASSERT(!es);
            asyncWriteHandlerCalled1 = true;
            TS_ASSERT_EQUALS(writtenSize, CommonString.size());
            checkStop();
        });

    el.run();
    TS_ASSERT_EQUALS(asyncReadHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled1, true);
    TS_ASSERT_EQUALS(asyncReadHandlerCalled2, true);
    TS_ASSERT_EQUALS(asyncWriteHandlerCalled2, true);

    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData(Id1).begin()));
    TS_ASSERT(std::equal(CommonString.begin(), CommonString.end(), device.getWrittenData(Id2).begin()));
}
