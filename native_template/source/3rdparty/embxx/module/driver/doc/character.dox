/// @page driver_character_page Character device driver
/// @section driver_character_overview Overview
/// Character device driver (embxx::driver::Character) provides a convenient
/// interface for I/O operations over hardware device (peripheral) that
/// supports only single character transmition/reception at a time. 
/// 
/// The operations the driver currently supports are:
/// @li Read number of characters into the buffer.
/// @li Read characters into the buffer until particular character is received.
/// @li Write number of characters from the buffer.
/// @li Cancel current "read" operation.
/// @li Cancel current "write" operation.
///
/// @section driver_character_tutorial How to use
/// Like any other driver in embxx::driver module embxx::driver::Character 
/// depends on and uses an event loop (a variant of embxx::util::EventLoop) to
/// schedule execution of "read/write complete" handlers. To be able to define 
/// a character driver object it is needed to define and instantiate EventLoop one.
/// @code
/// #include "embxx/util/EventLoop.h"
/// typedef embxx::util::EventLoop<...> EventLoop;
/// EventLoop el;
/// @endcode
///
/// embxx::driver::Character also requires device (peripheral) control class to
/// define a specific interface interface. See the documenation of TDevide
/// template parameter of embxx::driver::Character class.
/// @code
/// class CharDevice
/// {
/// public:
///     typedef char CharType;
///
///     template <typename TFunc>
///     void setCanReadHandler(TFunc&& func) { ... }
///
///     template <typename TFunc>
///     void setCanReadHandler(TFunc&& func) { ... }
///
///     template <typename TFunc>
///     void setReadCompleteHandler(TFunc&& func) { ... }
///
///     template <typename TFunc>
///     void setWriteCompleteHandler(TFunc&& func) { ... }
///
///     void startRead(std::size_t length, embxx::device::context::EventLoop context) { ... }
///
///     void startRead(std::size_t length, embxx::device::context::Interrupt context) { ... }
///
///     bool cancelRead(embxx::device::context::EventLoop context) { ... }
///
///     bool cancelRead(embxx::device::context::Interrupt context) { ... }
///
///     void startWrite(std::size_t length, embxx::device::context::EventLoop context) { ... }
///
///     bool cancelWrite(embxx::device::context::EventLoop context) { ... }
///
///     bool suspend(embxx::device::context::EventLoop context) { ... }
///
///     void resume(embxx::device::context::EventLoop context) { ... }
///
///     bool canRead(embxx::device::context::Interrupt context) { ... }
///
///     bool canWrite(embxx::device::context::Interrupt context) { ... }
///
///     CharType read(embxx::device::context::Interrupt context) { ... }
///
///     void write(CharType value, embxx::device::context::Interrupt context) { ... }
/// private:
///     ...
/// };
/// 
/// CharDevice device;
/// @endcode
///
/// Define and instantiate Character driver as following:
/// @code
/// #include "embxx/driver/Character.h"
/// 
/// // Define driver traits. See description of TTraits template parameter of
/// // embxx::driver::Character.
/// struct CharDriverTraits
/// {
///     typedef embxx::util::StaticFunction<void(const embxx::error::ErrorStatus&, std::size_t)> ReadHandler;
///     typedef embxx::util::StaticFunction<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
///     typedef embxx::util::StaticFunction<bool(CharDevice::CharType)> ReadUntilPred;
///     static const std::size_t ReadQueueSize = 1;
///     static const std::size_t WriteQueueSize = 1;
/// };
///
/// typedef embxx::driver::Character<CharDevice, EventLoop, CharDriverTraits> CharDriver;
/// CharDriver driver(device, el);
/// @endcode 
/// Now it is possible to issue asynchronous read/write requests for the blocks
/// of data. Please note, that it is impossible to issue second read or write
/// request while previous one of the same type hasn't finished (unless the
/// size of the read/write queues in the traits are greater than 1). 
/// However it is possible to issue independed read and write requests at the 
/// same time (but only in case the actual device control object allows it).
///
/// Read block of characters examle:
/// @code
/// CharDriver::CharType buf[128];
/// driver.asyncRead(buf, sizeof(buf)/sizeof(buf[0]), 
///     [](const embxx::error::ErrorStatus& status, std::size_t bytesRead)
///     {
///         ... // Handle read data in this callback.
///     });
/// @endcode
///
/// Read block of characters until specific character is received:
/// @code
/// CharDriver::CharType buf[128];
/// driver.asyncReadUntil(buf, sizeof(buf)/sizeof(buf[0]), '\n' 
///     [](const embxx::error::ErrorStatus& status, std::size_t bytesRead)
///     {
///         ... // Handle read data in this callback.
///     });
/// @endcode
///
/// Write block of characters example:
/// @code
/// CharDriver::CharType buf[128] = {...};
/// driver.asyncWrite(buf, sizeof(buf)/sizeof(buf[0]),
///     [](const embxx::error::ErrorStatus&, std::size_t bytesWritten)
///     {
///         ... // Perform operations after the write is complete in this callback.
///     });
/// @endcode
/// 
/// The embxx::driver::Character driver supports both read-only and write-only
/// devices. For example, the UART device that is used for debug output is not
/// expected to receive any input and there is no need for it to implement
/// "read" related member functions, such as "startRead()", "cancelRead()", 
/// "canRead()" and "read()". The definition of the driver and its traits will
/// be like this:
/// @code
/// struct CharDriverTraits
/// {
///     typedef std::nullptr_t ReadHandler;
///     typedef embxx::util::StaticFunction<void(const embxx::error::ErrorStatus&, std::size_t)> WriteHandler;
///     typedef std::nullptr_t ReadUntilPred;
///     static const std::size_t ReadQueueSize = 0;
///     static const std::size_t WriteQueueSize = 1;
/// };
///
/// typedef embxx::driver::Character<EventLoop, CharDevice, CharDriverTraits> CharDriver;
/// CharDriver driver(device, el);
/// ...
/// driver.asyncWrite(...);
/// @endcode
